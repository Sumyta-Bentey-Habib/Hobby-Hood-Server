require("dotenv").config();
const express = require("express");
const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const cors = require("cors");

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB URI
const uri = `mongodb+srv://${process.env.DB_USERS}:${process.env.DB_PASSWORD}@cluster0.3wn1jax.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;

// Create MongoClient
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function run() {
  try {
    await client.connect();
    console.log("Connected to MongoDB!");

    const hobbyCollection = client.db("hobbyDB").collection("hobbies");
    const myGroupCollection = client.db("hobbyDB").collection("myGroups");

    // POST: Add a new hobby
    app.post("/hobbies", async (req, res) => {
      const result = await hobbyCollection.insertOne(req.body);
      res.send(result);
    });

    // GET: All hobbies
    app.get("/hobbies", async (req, res) => {
      const result = await hobbyCollection.find().toArray();
      res.send(result);
    });

    // POST: Add to My Groups if not already added by the same user
    app.post("/my-groups", async (req, res) => {
      const { _id: hobbyId, userEmail, ...rest } = req.body;

      if (!hobbyId || !userEmail) {
        return res.status(400).send({ message: "Group must have hobbyId (_id) and userEmail" });
      }

      let hobbyObjectId;
      try {
        hobbyObjectId = new ObjectId(hobbyId);
      } catch {
        return res.status(400).send({ message: "Invalid hobby ID" });
      }

      // Check if user already added this hobby
      const existing = await myGroupCollection.findOne({ hobbyId: hobbyObjectId, userEmail });
      if (existing) {
        return res.status(400).send({ message: "Already added to My Groups" });
      }

      // Insert new document with hobbyId as a separate field, _id auto-generated by MongoDB
      const groupDoc = {
        hobbyId: hobbyObjectId,
        userEmail,
        ...rest,
      };

      const result = await myGroupCollection.insertOne(groupDoc);
      res.send(result);
    });

    // GET: All My Groups by userEmail
    app.get("/my-groups", async (req, res) => {
      const userEmail = req.query.userEmail;
      if (!userEmail) {
        return res.status(400).send({ message: "User email required" });
      }
      const result = await myGroupCollection.find({ userEmail }).toArray();
      res.send(result);
    });

    // DELETE: Remove a group by its unique _id and userEmail
    app.delete("/my-groups/:id", async (req, res) => {
      const id = req.params.id;
      const userEmail = req.query.userEmail;

      if (!userEmail) {
        return res.status(400).send({ success: false, message: "User email required" });
      }

      try {
        const objectId = new ObjectId(id); // Unique _id of myGroups document
        const result = await myGroupCollection.deleteOne({ _id: objectId, userEmail });
        if (result.deletedCount === 1) {
          return res.send({ success: true, message: "Group removed" });
        }
        return res.status(404).send({ success: false, message: "Group not found" });
      } catch (error) {
        console.error("Invalid ObjectId format or delete failed:", error);
        return res.status(400).send({ success: false, message: "Invalid group ID" });
      }
    });
    // PUT: Update a group by its unique _id and userEmail
app.put("/my-groups/:id", async (req, res) => {
  const id = req.params.id;
  const userEmail = req.query.userEmail;
  const updateData = req.body;

  if (!userEmail) {
    return res.status(400).send({ success: false, message: "User email required" });
  }

  if (!updateData || Object.keys(updateData).length === 0) {
    return res.status(400).send({ success: false, message: "Update data required" });
  }

  try {
    const objectId = new ObjectId(id);

    const result = await myGroupCollection.updateOne(
      { _id: objectId, userEmail },
      { $set: updateData }
    );

    if (result.matchedCount === 0) {
      return res.status(404).send({ success: false, message: "Group not found or not authorized" });
    }

    res.send({ success: true, message: "Group updated successfully" });
  } catch (error) {
    console.error("Invalid ObjectId format or update failed:", error);
    res.status(400).send({ success: false, message: "Invalid group ID" });
  }
});
// GET: All groups (all documents in myGroups collection)
app.get("/all-groups", async (req, res) => {
  try {
    const result = await myGroupCollection.find().toArray();
    res.send(result);
  } catch (error) {
    console.error("Failed to get all groups:", error);
    res.status(500).send({ message: "Internal server error" });
  }
});



    // Ping test
    await client.db("admin").command({ ping: 1 });
  } catch (error) {
    console.error("MongoDB connection error:", error);
  }
}

run().catch(console.dir);

app.get("/", (req, res) => {
  res.send("ðŸŽ‰ Hobby Group Server is Running!");
});

app.listen(port, () => {
  console.log(`ðŸš€ Server listening at http://localhost:${port}`);
});
